package com.sift.loan.utility;

import java.io.File;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Date;
import java.text.DateFormat;
import java.text.DecimalFormat;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Font.FontFamily;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.sift.admin.model.Company;
import com.sift.admin.model.MemberInfo;
import com.sift.admin.model.MemberView;
import com.sift.loan.model.LoanRepaymentSchedule;
import com.sift.loan.model.LoanRequest;

public class PDFUtility {
  private static String FILE = "c:/temp/FirstPdf.pdf";
  private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
      Font.BOLD);
  private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
      Font.NORMAL, BaseColor.RED);
  private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
      Font.BOLD);
  private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
      Font.BOLD);

  public static void main_(String[] args) {
    try {
    	System.out.print("OK");
      Document document = new Document();
      PdfWriter.getInstance(document, new FileOutputStream(FILE));
      document.open();
      addMetaData(document);
      //addTitlePage(document);
      addContent(document);
      document.close();
    }catch(Exception e) {
      e.printStackTrace();
    }
  }
  
  public static void main(String[] args) {
	  
	  String pdfFilename = "";
	  PDFUtility printReport = new PDFUtility();
	 
	  pdfFilename = "xtoffel1.pdf";
	  printReport.createPDF(pdfFilename);
	 
	 }
  
  public void generateDoc(ArrayList<LoanRepaymentSchedule> schedules, LoanRequest loan) {
      try{
        Document document = new Document();
        PdfWriter.getInstance(document, new FileOutputStream(FILE));
        document.open();
        addMetaData(document);
        addTitlePage(document);
        addContent(document);
        document.close();
      }catch (Exception e){
        e.printStackTrace();
      }
  }

  // iText allows to add metadata to the PDF which can be viewed in your Adobe
  // Reader
  // under File -> Properties
  private static void addMetaData(Document doc) {
	   doc.addTitle("EasyCoopFin Loan Schedule");
	   doc.addSubject("Loan Disbursement Details");
	   doc.addKeywords("Loan Disbursement");
	   doc.addAuthor("XTOFFEL SOFTWARE");
	   doc.addCreationDate();
	   doc.addProducer();
	   doc.addCreator("CHRIS FASEUN");
	   doc.setPageSize(PageSize.LETTER);
  }

  private static void addTitlePage(Document document)
      throws DocumentException {
    Paragraph preface = new Paragraph();
    // We add one empty line
    addEmptyLine(preface, 1);
    // Lets write a big header
    preface.add(new Paragraph("EasyCoopFin Loan Schedule", catFont));
    addEmptyLine(preface, 1);

    /******************************************************************************************************************************************************
    preface.add(new Paragraph("Report generated by: " + System.getProperty("user.name") + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
        smallBold));
    addEmptyLine(preface, 3);
    preface.add(new Paragraph("This document describes something which is very important ",
        smallBold));

    addEmptyLine(preface, 8);

    preface.add(new Paragraph("This document is a preliminary version and not subject to your license agreement or any other agreement with vogella.com ;-).",
        redFont));

    document.add(preface);
    ******************************************************************************************************************************************************/
    
    //Start a new page
    document.newPage();
  }

  private static void addContent(Document document) throws DocumentException {
    Anchor anchor = new Anchor("First Chapter", catFont);
    anchor.setName("First Chapter");

    // Second parameter is the number of the chapter
    Chapter catPart = new Chapter(new Paragraph(anchor), 1);

    Paragraph subPara = new Paragraph("Subcategory 1", subFont);
    Section subCatPart = catPart.addSection(subPara);
    subCatPart.add(new Paragraph("Hello"));

    subPara = new Paragraph("Subcategory 2", subFont);
    subCatPart = catPart.addSection(subPara);
    subCatPart.add(new Paragraph("Paragraph 1"));
    subCatPart.add(new Paragraph("Paragraph 2"));
    subCatPart.add(new Paragraph("Paragraph 3"));

    // add a list
    createList(subCatPart);
    Paragraph paragraph = new Paragraph();
    addEmptyLine(paragraph, 5);
    subCatPart.add(paragraph);

    // add a table
    createTable(subCatPart);

    // now add all this to the document
    document.add(catPart);

    // Next section
    anchor = new Anchor("Second Chapter", catFont);
    anchor.setName("Second Chapter");

    // Second parameter is the number of the chapter
    catPart = new Chapter(new Paragraph(anchor), 1);

    subPara = new Paragraph("Subcategory", subFont);
    subCatPart = catPart.addSection(subPara);
    subCatPart.add(new Paragraph("This is a very important message"));

    //now add all this to the document
    document.add(catPart);
  }

  //http://howtodoinjava.com/2014/07/29/create-pdf-files-in-java-itext-tutorial/
  //http://www.vogella.com/tutorials/JavaPDF/article.html
  //http://www.mysamplecode.com/2012/10/create-table-pdf-java-and-itext.html
  private static void createTable(Section subCatPart)
      throws BadElementException {
    PdfPTable table = new PdfPTable(7);

    PdfPCell c1 = new PdfPCell(new Phrase("ID"));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);

    c1 = new PdfPCell(new Phrase("Interest"));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);

    c1 = new PdfPCell(new Phrase("Principal"));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    
    c1 = new PdfPCell(new Phrase("Amount"));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);

    c1 = new PdfPCell(new Phrase("Date Due"));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    
    c1 = new PdfPCell(new Phrase("Cumm. Principal"));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);

    c1 = new PdfPCell(new Phrase("Status"));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);    

    table.setHeaderRows(1);

    table.addCell("1.0");
    table.addCell("1.1");
    table.addCell("1.2");
    table.addCell("2.1");
    table.addCell("2.2");
    table.addCell("2.3");

    subCatPart.add(table);
  }

  private static void createList(Section subCatPart){
    List list = new List(true, false, 10);
    list.add(new ListItem("First point"));
    list.add(new ListItem("Second point"));
    list.add(new ListItem("Third point"));
    subCatPart.add(list);
  }

  private static void addEmptyLine(Paragraph paragraph, int number) {
    for (int i = 0; i < number; i++) {
      paragraph.add(new Paragraph(" "));
    }
  }
  
  private void insertCell(PdfPTable table, String text, int align, int colspan, Font font){
	  text=text==null?" ":text.trim();
	  //create a new cell with the specified Text and Font
	  PdfPCell cell = new PdfPCell(new Phrase(text.trim(), font));
	  //set the cell alignment
	  cell.setHorizontalAlignment(align);
	  //set the cell column span in case you want to merge two or more cells
	  cell.setColspan(colspan);
	  //in case there is no text and you wan to create an empty row
	  if(text.trim().equalsIgnoreCase("")){
	   cell.setMinimumHeight(10f);
	  }
	  //add the call to the table
	  table.addCell(cell);	   
  }
  
  public boolean createLoanSchedulePDF(String uploadPath,String pdfFilename,ArrayList<LoanRepaymentSchedule> schedules, LoanRequest loan,MemberView member,Company coy){	  
	  boolean success=false;
	  Document doc = new Document();
	  PdfWriter docWriter = null;
	  String outfile =null;
	  
	  DecimalFormat df = new DecimalFormat("0,000.00");
	  DateFormat dtf = new java.text.SimpleDateFormat("dd/MM/yyyy");
	  
	  /***********************************************************
	  System.out.println("schedules:=" + schedules.toString());
	  System.out.println("loan:=" + loan.toString());
	  System.out.println("member:=" + member.toString());
	  System.out.println("member:=" + member.toString());
	  System.out.println("coy:=" + coy.toString());
	  ***********************************************************/
	  	  
	  try{	    
		   //special font sizes
		   Font bfBold12 = new Font(FontFamily.TIMES_ROMAN, 12, Font.BOLD, new BaseColor(0, 0, 0)); 
		   Font bf12 = new Font(FontFamily.TIMES_ROMAN, 12); 
		   
		   //file path
		   outfile = uploadPath + pdfFilename;
		   docWriter = PdfWriter.getInstance(doc , new FileOutputStream(outfile));		    
		   doc.open();
		   
		   //document header attributes
		   doc.addTitle("EasyCoopFin Loan Schedule");
		   doc.addSubject("Loan Disbursement Details");
		   doc.addKeywords("Loan Disbursement");
		   doc.addAuthor("XTOFFEL SOFTWARE");
		   doc.addCreationDate();
		   doc.addProducer();
		   doc.addCreator("CHRIS FASEUN");
		   doc.setPageSize(PageSize.LETTER);
		   
		   addTitlePage(doc);		   
		   //doc.newPage();
		   	 
		   //create a paragraph
		   Paragraph paragraph0 = new Paragraph("LOAN DISBURSEMENT SCHEDULE REPORT.",smallBold);
	
		   //specify column widths
		   float[] columnWidths0 = {5f, 5f};
		   //create PDF table with the given widths
		   PdfPTable table0 = new PdfPTable(columnWidths0);
		   // set table width a percentage of the page width
		   table0.setWidthPercentage(90f);
		 
		   //insert column headings
		   insertCell(table0, "LOAN REQUEST DETAILS", Element.ALIGN_CENTER, 2, bfBold12);
		   insertCell(table0, "", Element.ALIGN_LEFT, 2, bfBold12);
		   table0.setHeaderRows(1);
		   		     
		   insertCell(table0, "Loan ID", Element.ALIGN_LEFT, 1, bfBold12);
		   insertCell(table0,  loan.getLoanCaseId(), Element.ALIGN_RIGHT, 1, bfBold12);
		   
		   insertCell(table0,  "Member No", Element.ALIGN_LEFT, 1, bfBold12);
		   insertCell(table0,  member.getMemberNo(), Element.ALIGN_RIGHT, 1, bfBold12);
			   
		   insertCell(table0,  "Member Name", Element.ALIGN_LEFT, 1, bfBold12);
		   insertCell(table0,  NVL(member.getSurname()) + " " + NVL(member.getFirstname()), Element.ALIGN_RIGHT, 1, bfBold12);
		   	   
		   insertCell(table0,  "Loan Amount", Element.ALIGN_LEFT, 1, bfBold12);
		   insertCell(table0,  df.format(loan.getApprovedAmount()), Element.ALIGN_RIGHT, 1, bfBold12);
		   
		   insertCell(table0,  "Request Date", Element.ALIGN_LEFT, 1, bfBold12);
		   insertCell(table0,  dtf.format(loan.getRequestDate()), Element.ALIGN_RIGHT, 1, bfBold12);
		   
		   insertCell(table0,  "Approved Date", Element.ALIGN_LEFT, 1, bfBold12);
		   insertCell(table0,  loan.getApprovalDate()==null?" ":dtf.format(loan.getApprovalDate()), Element.ALIGN_RIGHT, 1, bfBold12);
		   
		   insertCell(table0,  "Interest Rate", Element.ALIGN_LEFT, 1, bfBold12);
		   insertCell(table0,  df.format(loan.getAppliedRate()), Element.ALIGN_RIGHT, 1, bfBold12);
		   
		   insertCell(table0,  "Installments", Element.ALIGN_LEFT, 1, bfBold12);
		   insertCell(table0,  String.valueOf(loan.getNoOfInstallments()), Element.ALIGN_RIGHT, 1, bfBold12);
		   
		   insertCell(table0,  "Total Interest Due", Element.ALIGN_LEFT, 1, bfBold12);
		   insertCell(table0,  df.format(loan.getApprovedAmount()), Element.ALIGN_RIGHT, 1, bfBold12);
		   
		   insertCell(table0,  "Approved By", Element.ALIGN_LEFT, 1, bfBold12);
		   insertCell(table0,  loan.getApprovedBy(), Element.ALIGN_RIGHT, 1, bfBold12);
		   
		   /*******************************************************************************************
		   insertCell(table0,  "Disburse Date", Element.ALIGN_LEFT, 1, bfBold12);
		   insertCell(table0,  loan.getDisburseDate()==null?" ":dtf.format(loan.getDisburseDate()), Element.ALIGN_RIGHT, 1, bfBold12);
		   
		   insertCell(table0,  "Disbursement By", Element.ALIGN_LEFT, 1, bfBold12);
		   insertCell(table0,  loan.getDisburseBy()==null?" ":loan.getDisburseBy(), Element.ALIGN_RIGHT, 1, bfBold12);
           *******************************************************************************************/
		   
		   paragraph0.add(table0);
		   doc.add(paragraph0);
		   
		   //create the loan schedule section
		   Paragraph paragraph = new Paragraph("LOAN SCHEDULE BREAKDOWN [Loan ID: " +loan.getLoanCaseId()+ "]");
		   
		   //specify column widths
		   float[] columnWidths = {1f, 2f, 2f, 2f, 2f, 2f, 2f};
		   //create PDF table with the given widths
		   PdfPTable table = new PdfPTable(columnWidths);
		   // set table width a percentage of the page width
		   table.setWidthPercentage(90f);
		 
		   //create section heading by cell merging
		   insertCell(table, "Schedule Details ...", Element.ALIGN_LEFT, 7, bfBold12);
		   
		   //insert column headings
		   insertCell(table, "ID", Element.ALIGN_RIGHT, 1, bfBold12);
		   insertCell(table, "Interest", Element.ALIGN_LEFT, 1, bfBold12);
		   insertCell(table, "Principal", Element.ALIGN_LEFT, 1, bfBold12);
		   insertCell(table, "Amount", Element.ALIGN_RIGHT, 1, bfBold12);
		   insertCell(table, "Date Due", Element.ALIGN_LEFT, 1, bfBold12);
		   insertCell(table, "Cumm. Principal", Element.ALIGN_LEFT, 1, bfBold12);
		   insertCell(table, "Status", Element.ALIGN_RIGHT, 1, bfBold12);
		   table.setHeaderRows(1);
		 
		   //insert an empty row
		   insertCell(table, " ", Element.ALIGN_LEFT, 7, bfBold12);
		   		   
		   int counter=1;
		    
		   //just some random data to fill 
		   for(LoanRepaymentSchedule item: schedules){
			    String counterStr=String.valueOf(counter++);
			    
			    insertCell(table, counterStr, Element.ALIGN_RIGHT, 1, bf12);
			    insertCell(table, df.format(item.getAmountInterest()), Element.ALIGN_LEFT, 1, bf12);
			    insertCell(table, df.format(item.getAmountPrincipal()), Element.ALIGN_LEFT, 1, bf12);
			    insertCell(table, df.format(item.getExpectedRepaymentAmount()), Element.ALIGN_RIGHT, 1, bf12);
			    insertCell(table, dtf.format(item.getExpectedRepaymentDate()), Element.ALIGN_LEFT, 1, bf12);
			    insertCell(table, df.format(item.getCummPrincipal()), Element.ALIGN_LEFT, 1, bf12);
			    insertCell(table, item.getPaymentStatus()==null?"P":item.getPaymentStatus(), Element.ALIGN_LEFT, 1, bf12);
		   }
	   			   
		   //add the PDF table to the paragraph 
	   
		   paragraph.add(table);
		   doc.add(paragraph);	 
		   doc.close();
		   success=new File(outfile).exists();
		   System.out.print(success);
	  }catch (DocumentException dex){
		   dex.printStackTrace();
	  }catch (Exception ex){
		   ex.printStackTrace();
	  }catch (Throwable ex){
		   ex.printStackTrace();
	  }finally{
		   if(doc != null){
			   
		   }
		   
		   if(docWriter!= null){
			   docWriter.close();
		   }
		   
		   //success=new File(outfile).exists();
	  }
	  
	  return success;
   }
  
  public String NVL(String input){
	  return input==null?" ":input.trim();
  }
  
  public void createLSPDF(String uploadPath,String pdfFilename,ArrayList<LoanRepaymentSchedule> schedules, LoanRequest loan,MemberView member,Company coy){	  
  	  Document doc = new Document();
	  PdfWriter docWriter = null;
	 
	  DecimalFormat df = new DecimalFormat("0,000.00");
	 
	  try {	    
	   //special font sizes
	   Font bfBold12 = new Font(FontFamily.TIMES_ROMAN, 12, Font.BOLD, new BaseColor(0, 0, 0)); 
	   Font bf12 = new Font(FontFamily.TIMES_ROMAN, 12); 
	 
	   //File Path
	   String path =uploadPath + pdfFilename;
	   docWriter = PdfWriter.getInstance(doc , new FileOutputStream(path));
	    
	   //document header attributes
	   doc.addTitle("EasyCoopFin Loan Schedule");
	   doc.addSubject("Loan Disbursement Details");
	   doc.addKeywords("Loan Disbursement");
	   doc.addAuthor("XTOFFEL SOFTWARE");
	   doc.addCreationDate();
	   doc.addProducer();
	   doc.addCreator("CHRIS FASEUN");
	   doc.setPageSize(PageSize.LETTER);
	   
	   //open document
	   doc.open();
	 
	   //create a paragraph
	   Paragraph paragraph = new Paragraph("LOAN DISBURSEMENT SCHEDULE REPORT.");
	   	    
	   //specify column widths
	   float[] columnWidths = {1.5f, 2f, 5f, 2f};
	   //create PDF table with the given widths
	   PdfPTable table = new PdfPTable(columnWidths);
	   // set table width a percentage of the page width
	   table.setWidthPercentage(90f);
	 
	   //insert column headings
	   insertCell(table, "Order No", Element.ALIGN_RIGHT, 1, bfBold12);
	   insertCell(table, "Account No", Element.ALIGN_LEFT, 1, bfBold12);
	   insertCell(table, "Account Name", Element.ALIGN_LEFT, 1, bfBold12);
	   insertCell(table, "Order Total", Element.ALIGN_RIGHT, 1, bfBold12);
	   table.setHeaderRows(1);
	 
	   //insert an empty row
	   insertCell(table, "", Element.ALIGN_LEFT, 4, bfBold12);
	   //create section heading by cell merging
	   insertCell(table, "New York Orders ...", Element.ALIGN_LEFT, 4, bfBold12);
	   double orderTotal, total = 0;
	    
	   //just some random data to fill 
	   for(int x=1; x<5; x++){
	     
	    insertCell(table, "10010" + x, Element.ALIGN_RIGHT, 1, bf12);
	    insertCell(table, "ABC00" + x, Element.ALIGN_LEFT, 1, bf12);
	    insertCell(table, "This is Customer Number ABC00" + x, Element.ALIGN_LEFT, 1, bf12);
	     
	    orderTotal = Double.valueOf(df.format(Math.random() * 1000));
	    total = total + orderTotal;
	    insertCell(table, df.format(orderTotal), Element.ALIGN_RIGHT, 1, bf12);
	     
	   }
	   //merge the cells to create a footer for that section
	   insertCell(table, "New York Total...", Element.ALIGN_RIGHT, 3, bfBold12);
	   insertCell(table, df.format(total), Element.ALIGN_RIGHT, 1, bfBold12);
	    
	   //repeat the same as above to display another location
	   insertCell(table, "", Element.ALIGN_LEFT, 4, bfBold12);
	   insertCell(table, "California Orders ...", Element.ALIGN_LEFT, 4, bfBold12);
	   orderTotal = 0;
	    
	   for(int x=1; x<7; x++){	     
		    insertCell(table, "20020" + x, Element.ALIGN_RIGHT, 1, bf12);
		    insertCell(table, "XYZ00" + x, Element.ALIGN_LEFT, 1, bf12);
		    insertCell(table, "This is Customer Number XYZ00" + x, Element.ALIGN_LEFT, 1, bf12);
		     
		    orderTotal = Double.valueOf(df.format(Math.random() * 1000));
		    total = total + orderTotal;
		    insertCell(table, df.format(orderTotal), Element.ALIGN_RIGHT, 1, bf12);	     
	   }
	   
	   insertCell(table, "California Total...", Element.ALIGN_RIGHT, 3, bfBold12);
	   insertCell(table, df.format(total), Element.ALIGN_RIGHT, 1, bfBold12);
	    
	   //add the PDF table to the paragraph 
	   paragraph.add(table);
	   // add the paragraph to the document
	   doc.add(paragraph);	 
	  }catch (DocumentException dex){
	     dex.printStackTrace();
	  }catch (Exception ex){
	     ex.printStackTrace();
	  }finally
	  {
	   if (doc != null){		   
	      //close the document
	      doc.close();
	   }
	   if (docWriter != null){
	    //close the writer
	    docWriter.close();
	   }
	  }
  }
  
  private void createPDF (String pdfFilename){
  //public void createPDF(String uploadPath,String pdfFilename,ArrayList<LoanRepaymentSchedule> schedules, LoanRequest loan,MemberView member,Company coy){	  
  	  Document doc = new Document();
	  PdfWriter docWriter = null;
	 
	  DecimalFormat df = new DecimalFormat("0,000.00");
	 
	  try{	    
	   //special font sizes
	   Font bfBold12 = new Font(FontFamily.TIMES_ROMAN, 12, Font.BOLD, new BaseColor(0, 0, 0)); 
	   Font bf12 = new Font(FontFamily.TIMES_ROMAN, 12); 
	 
	   //File Path
	   String path ="c:/" + pdfFilename;
	   docWriter = PdfWriter.getInstance(doc , new FileOutputStream(path));
	    
	   //document header attributes
	   doc.addTitle("EasyCoopFin Loan Schedule");
	   doc.addSubject("Loan Disbursement Details");
	   doc.addKeywords("Loan Disbursement");
	   doc.addAuthor("XTOFFEL SOFTWARE");
	   doc.addCreationDate();
	   doc.addProducer();
	   doc.addCreator("CHRIS FASEUN");
	   doc.setPageSize(PageSize.LETTER);
	   
	   //open document
	   doc.open();
	 
	   //create a paragraph
	   //create a paragraph
	   Paragraph paragraph = new Paragraph("LOAN DISBURSEMENT REPORT.",smallBold);

	   //specify column widths
	   float[] columnWidths0 = {5f, 5f};
	   //create PDF table with the given widths
	   PdfPTable table0 = new PdfPTable(columnWidths0);
	   // set table width a percentage of the page width
	   table0.setWidthPercentage(90f);
	 
	   //insert column headings
	   insertCell(table0, "LOAN REQUEST DETAILS", Element.ALIGN_RIGHT, 2, bfBold12);
	   insertCell(table0, "", Element.ALIGN_LEFT, 2, bfBold12);
	   table0.setHeaderRows(1);
	   
	     
	   insertCell(table0, "Loan ID", Element.ALIGN_RIGHT, 1, bfBold12);
	   //insertCell(table0,  loan.getLoanCaseId(), Element.ALIGN_RIGHT, 1, bfBold12);
	   
	   insertCell(table0,  "Member No", Element.ALIGN_LEFT, 1, bfBold12);
	   //insertCell(table0,  member.getMemberNo(), Element.ALIGN_LEFT, 1, bfBold12);

	   
	   insertCell(table0,  "Member Name", Element.ALIGN_LEFT, 1, bfBold12);
	   //insertCell(table0,  NVL(member.getSurname()) + " " + NVL(member.getFirstname()), Element.ALIGN_LEFT, 1, bfBold12);
	   	   
	   insertCell(table0,  "Loan Amount", Element.ALIGN_RIGHT, 1, bfBold12);
	   //insertCell(table0,  df.format(loan.getApprovedAmount()), Element.ALIGN_RIGHT, 1, bfBold12);
	   
	   insertCell(table0,  "Request Date", Element.ALIGN_LEFT, 1, bfBold12);
	   //insertCell(table0,  dtf.format(loan.getRequestDate()), Element.ALIGN_LEFT, 1, bfBold12);
	   
	   insertCell(table0,  "Approved Date", Element.ALIGN_LEFT, 1, bfBold12);
	   //insertCell(table0,  loan.getApprovalDate()==null?" ":dtf.format(loan.getApprovalDate()), Element.ALIGN_LEFT, 1, bfBold12);
	   
	   insertCell(table0,  "Interest Rate", Element.ALIGN_LEFT, 1, bfBold12);
	   //insertCell(table0,  df.format(loan.getAppliedRate()), Element.ALIGN_LEFT, 1, bfBold12);
	   
	   insertCell(table0,  "Installments", Element.ALIGN_RIGHT, 1, bfBold12);
	   //insertCell(table0,  String.valueOf(loan.getNoOfInstallments()), Element.ALIGN_RIGHT, 1, bfBold12);
	   
	   insertCell(table0,  "Total Interest Due", Element.ALIGN_LEFT, 1, bfBold12);
	   //insertCell(table0,  df.format(loan.getApprovedAmount()), Element.ALIGN_LEFT, 1, bfBold12);
	   
	   insertCell(table0,  "Approved By", Element.ALIGN_LEFT, 1, bfBold12);
	   //insertCell(table0,  loan.getApprovedBy(), Element.ALIGN_LEFT, 1, bfBold12);
	   
	   insertCell(table0,  "Disburse Date", Element.ALIGN_RIGHT, 1, bfBold12);
	   //insertCell(table0,  loan.getDisburseDate()==null?" ":dtf.format(loan.getDisburseDate()), Element.ALIGN_RIGHT, 1, bfBold12);
	   
	   insertCell(table0,  "Disbursement By", Element.ALIGN_LEFT, 1, bfBold12);
	   //insertCell(table0,  loan.getDisburseBy()==null?" ":loan.getDisburseBy(), Element.ALIGN_LEFT, 1, bfBold12);
   
	   paragraph.add(table0);
	   doc.add(paragraph);
	   
	   //create a paragraph
	   Paragraph paragraph0 = new Paragraph("LOAN SCHEDULE.",smallBold);
	   //Paragraph paragraph = new Paragraph("LOAN SCHEDULE (" +loan.getLoanCaseId()+ ")");
	   
	   //specify column widths
	   float[] columnWidthsX = {1f, 2f, 2f, 2f, 2f, 2f, 2f};
	   //create PDF table with the given widths
	   PdfPTable tableX = new PdfPTable(columnWidthsX);
	   // set table width a percentage of the page width
	   tableX.setWidthPercentage(90f);
	 
	   //insert column headings
	   insertCell(tableX, "ID", Element.ALIGN_RIGHT, 1, bfBold12);
	   insertCell(tableX, "Interest", Element.ALIGN_LEFT, 1, bfBold12);
	   insertCell(tableX, "Principal", Element.ALIGN_LEFT, 1, bfBold12);
	   insertCell(tableX, "Amount", Element.ALIGN_RIGHT, 1, bfBold12);
	   insertCell(tableX, "Date Due", Element.ALIGN_LEFT, 1, bfBold12);
	   insertCell(tableX, "Cumm. Principal", Element.ALIGN_LEFT, 1, bfBold12);
	   insertCell(tableX, "Status", Element.ALIGN_RIGHT, 1, bfBold12);
	   tableX.setHeaderRows(1);
	 
	   //insert an empty row
	   insertCell(tableX, " ", Element.ALIGN_LEFT, 7, bfBold12);
	   //create section heading by cell merging
	   insertCell(tableX, "Schedule Details ...", Element.ALIGN_LEFT, 7, bfBold12);
	   	   
	   int counter=1;
	    
	   //just some random data to fill 
	   /***********/
	   //for(LoanRepaymentSchedule item: schedules){
		    String counterStr=String.valueOf(counter++);
		    
		    insertCell(tableX, counterStr, Element.ALIGN_RIGHT, 1, bf12);
		    insertCell(tableX, df.format(100.0), Element.ALIGN_LEFT, 1, bf12);
		    insertCell(tableX, df.format(100.0), Element.ALIGN_LEFT, 1, bf12);
		    insertCell(tableX, df.format(100.0), Element.ALIGN_RIGHT, 1, bf12);
		    insertCell(tableX, df.format(100.0), Element.ALIGN_LEFT, 1, bf12);
		    insertCell(tableX, df.format(100.0), Element.ALIGN_LEFT, 1, bf12);
		    insertCell(tableX, "P", Element.ALIGN_LEFT, 1, bf12);
	   //}
	   /************/
	   
	   paragraph0.add(tableX);
	   doc.add(paragraph0);
	 
	  }
	  catch (DocumentException dex)
	  {
	   dex.printStackTrace();
	  }
	  catch (Exception ex)
	  {
	   ex.printStackTrace();
	  }
	  finally
	  {
	   if (doc != null){
		   
	    //close the document
	    doc.close();
	   }
	   if (docWriter != null){
	    //close the writer
	    docWriter.close();
	   }
	  }
  }
  
  public boolean createPDF(String uploadPath,String pdfFilename,ArrayList<LoanRepaymentSchedule> schedules, LoanRequest loan,MemberView member,Company coy){	  
  	  Document doc = new Document();
	  PdfWriter docWriter = null;
	  boolean ok=false;
	 
	  DecimalFormat df = new DecimalFormat("0,000.00");
	 
	  try {
	    
	   //special font sizes
	   Font bfBold12 = new Font(FontFamily.TIMES_ROMAN, 12, Font.BOLD, new BaseColor(0, 0, 0)); 
	   Font bf12 = new Font(FontFamily.TIMES_ROMAN, 12); 
	 
	   //File Path
	   String path ="c:/" + pdfFilename;
	   docWriter = PdfWriter.getInstance(doc , new FileOutputStream(path));
	    
	   //document header attributes
	   doc.addTitle("EasyCoopFin Loan Schedule");
	   doc.addSubject("Loan Disbursement Details");
	   doc.addKeywords("Loan Disbursement");
	   doc.addAuthor("XTOFFEL SOFTWARE");
	   doc.addCreationDate();
	   doc.addProducer();
	   doc.addCreator("CHRIS FASEUN");
	   doc.setPageSize(PageSize.LETTER);
	   
	   //open document
	   doc.open();
	 
	   //create a paragraph
	 //create a paragraph
	   Paragraph paragraph = new Paragraph("LOAN DISBURSEMENT REPORT.",smallBold);

	   //specify column widths
	   float[] columnWidths0 = {5f, 5f};
	   //create PDF table with the given widths
	   PdfPTable table0 = new PdfPTable(columnWidths0);
	   // set table width a percentage of the page width
	   table0.setWidthPercentage(90f);
	 
	   //insert column headings
	   insertCell(table0, "LOAN REQUEST DETAILS", Element.ALIGN_RIGHT, 2, bfBold12);
	   insertCell(table0, "", Element.ALIGN_LEFT, 2, bfBold12);
	   table0.setHeaderRows(1);
	   	     
	   insertCell(table0, "Loan ID", Element.ALIGN_RIGHT, 1, bfBold12);
	   //insertCell(table0,  loan.getLoanCaseId(), Element.ALIGN_RIGHT, 1, bfBold12);
	   
	   insertCell(table0,  "Member No", Element.ALIGN_LEFT, 1, bfBold12);
	   //insertCell(table0,  member.getMemberNo(), Element.ALIGN_LEFT, 1, bfBold12);

	   
	   insertCell(table0,  "Member Name", Element.ALIGN_LEFT, 1, bfBold12);
	   //insertCell(table0,  NVL(member.getSurname()) + " " + NVL(member.getFirstname()), Element.ALIGN_LEFT, 1, bfBold12);
	   	   
	   insertCell(table0,  "Loan Amount", Element.ALIGN_RIGHT, 1, bfBold12);
	   //insertCell(table0,  df.format(loan.getApprovedAmount()), Element.ALIGN_RIGHT, 1, bfBold12);
	   
	   insertCell(table0,  "Request Date", Element.ALIGN_LEFT, 1, bfBold12);
	   //insertCell(table0,  dtf.format(loan.getRequestDate()), Element.ALIGN_LEFT, 1, bfBold12);
	   
	   insertCell(table0,  "Approved Date", Element.ALIGN_LEFT, 1, bfBold12);
	   //insertCell(table0,  loan.getApprovalDate()==null?" ":dtf.format(loan.getApprovalDate()), Element.ALIGN_LEFT, 1, bfBold12);
	   
	   insertCell(table0,  "Interest Rate", Element.ALIGN_LEFT, 1, bfBold12);
	   //insertCell(table0,  df.format(loan.getAppliedRate()), Element.ALIGN_LEFT, 1, bfBold12);
	   
	   insertCell(table0,  "Installments", Element.ALIGN_RIGHT, 1, bfBold12);
	   //insertCell(table0,  String.valueOf(loan.getNoOfInstallments()), Element.ALIGN_RIGHT, 1, bfBold12);
	   
	   insertCell(table0,  "Total Interest Due", Element.ALIGN_LEFT, 1, bfBold12);
	   //insertCell(table0,  df.format(loan.getApprovedAmount()), Element.ALIGN_LEFT, 1, bfBold12);
	   
	   insertCell(table0,  "Approved By", Element.ALIGN_LEFT, 1, bfBold12);
	   //insertCell(table0,  loan.getApprovedBy(), Element.ALIGN_LEFT, 1, bfBold12);
	   
	   insertCell(table0,  "Disburse Date", Element.ALIGN_RIGHT, 1, bfBold12);
	   //insertCell(table0,  loan.getDisburseDate()==null?" ":dtf.format(loan.getDisburseDate()), Element.ALIGN_RIGHT, 1, bfBold12);
	   
	   insertCell(table0,  "Disbursement By", Element.ALIGN_LEFT, 1, bfBold12);
	   //insertCell(table0,  loan.getDisburseBy()==null?" ":loan.getDisburseBy(), Element.ALIGN_LEFT, 1, bfBold12);
   
	   paragraph.add(table0);
	   doc.add(paragraph);
	   
	   //create a paragraph
	   Paragraph paragraph0 = new Paragraph("LOAN SCHEDULE.",smallBold);
	   //Paragraph paragraph = new Paragraph("LOAN SCHEDULE (" +loan.getLoanCaseId()+ ")");
	   
	   //specify column widths
	   float[] columnWidthsX = {1f, 2f, 2f, 2f, 2f, 2f, 2f};
	   //create PDF table with the given widths
	   PdfPTable tableX = new PdfPTable(columnWidthsX);
	   // set table width a percentage of the page width
	   tableX.setWidthPercentage(90f);
	 
	   //insert column headings
	   insertCell(tableX, "ID", Element.ALIGN_RIGHT, 1, bfBold12);
	   insertCell(tableX, "Interest", Element.ALIGN_LEFT, 1, bfBold12);
	   insertCell(tableX, "Principal", Element.ALIGN_LEFT, 1, bfBold12);
	   insertCell(tableX, "Amount", Element.ALIGN_RIGHT, 1, bfBold12);
	   insertCell(tableX, "Date Due", Element.ALIGN_LEFT, 1, bfBold12);
	   insertCell(tableX, "Cumm. Principal", Element.ALIGN_LEFT, 1, bfBold12);
	   insertCell(tableX, "Status", Element.ALIGN_RIGHT, 1, bfBold12);
	   tableX.setHeaderRows(1);
	 
	   //insert an empty row
	   insertCell(tableX, " ", Element.ALIGN_LEFT, 7, bfBold12);
	   //create section heading by cell merging
	   insertCell(tableX, "Schedule Details ...", Element.ALIGN_LEFT, 7, bfBold12);
	   	   
	   int counter=1;
	   	    
	   //just some random data to fill 
	   //for(LoanRepaymentSchedule item: schedules){	    
		    String counterStr=String.valueOf(counter++);
		    
		    insertCell(tableX, counterStr, Element.ALIGN_RIGHT, 1, bf12);
		    insertCell(tableX, df.format(100.0), Element.ALIGN_LEFT, 1, bf12);
		    insertCell(tableX, df.format(100.0), Element.ALIGN_LEFT, 1, bf12);
		    insertCell(tableX, df.format(100.0), Element.ALIGN_RIGHT, 1, bf12);
		    insertCell(tableX, df.format(100.0), Element.ALIGN_LEFT, 1, bf12);
		    insertCell(tableX, df.format(100.0), Element.ALIGN_LEFT, 1, bf12);
		    insertCell(tableX, "P", Element.ALIGN_LEFT, 1, bf12);
//	   /}
	   
	   paragraph0.add(tableX);
	   doc.add(paragraph0);
	   doc.close();
	  }
	  catch (DocumentException dex)
	  {
	   dex.printStackTrace();
	  }
	  catch (Exception ex)
	  {
	   ex.printStackTrace();
	  }catch (Throwable dex)
	  {
		   dex.printStackTrace();
		  }
	  finally
	  {

	   if (docWriter != null){
	    //close the writer
	    docWriter.close();
	   }
	  }
	  
	  return ok;
	 }
  
} 
